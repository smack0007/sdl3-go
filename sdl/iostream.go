package sdl

/*
#include <SDL3/SDL_iostream.h>
*/
import "C"
import (
	"unsafe"
)

type IOStatus C.SDL_IOStatus
type IOWhence C.SDL_IOWhence

const (
	PROP_IOSTREAM_WINDOWS_HANDLE_POINTER   string = C.SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER
	PROP_IOSTREAM_STDIO_FILE_POINTER       string = C.SDL_PROP_IOSTREAM_STDIO_FILE_POINTER
	PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER   string = C.SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER
	PROP_IOSTREAM_ANDROID_AASSET_POINTER   string = C.SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER
	PROP_IOSTREAM_MEMORY_POINTER           string = C.SDL_PROP_IOSTREAM_MEMORY_POINTER
	PROP_IOSTREAM_MEMORY_SIZE_NUMBER       string = C.SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER
	PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER   string = C.SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER
	PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER string = C.SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER

	IO_STATUS_READY     IOStatus = C.SDL_IO_STATUS_READY
	IO_STATUS_ERROR     IOStatus = C.SDL_IO_STATUS_ERROR
	IO_STATUS_EOF       IOStatus = C.SDL_IO_STATUS_EOF
	IO_STATUS_NOT_READY IOStatus = C.SDL_IO_STATUS_NOT_READY
	IO_STATUS_READONLY  IOStatus = C.SDL_IO_STATUS_READONLY
	IO_STATUS_WRITEONLY IOStatus = C.SDL_IO_STATUS_WRITEONLY

	IO_SEEK_SET IOWhence = C.SDL_IO_SEEK_SET
	IO_SEEK_CUR IOWhence = C.SDL_IO_SEEK_CUR
	IO_SEEK_END IOWhence = C.SDL_IO_SEEK_END
)

//
// Structs
//

type IOStream C.SDL_IOStream

//
// Functions
//

func IOFromConstMem[T any](mem *T, size uint64) (*IOStream, error) {
	result := (*IOStream)(
		C.SDL_IOFromConstMem(
			(unsafe.Pointer(mem)),
			(C.size_t)(size),
		),
	)

	return result, mapErrorPointer(result)
}
